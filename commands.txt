## Commands

This section lists command(s) run by metagenomicReport workflow

* Running metagenomicReport

### Kraken2

Kraken2 accepts paired fatq files and runs classificatiion of reads using k-mer database of 
various bacterial, fungal, protozoan and viral species.

'''
   kraken2 --paired ~{fastqR1} ~{fastqR2} --db ~{krakenDb} --report ~{sample}.kreport2.txt
'''

### Bracken

Bracken (Bayesian Reestimation of Abundance with KrakEN) is a highly accurate statistical method
that computes the abundance of species in DNA sequences from a metagenomics sample. Braken uses 
the taxonomy labels assigned by Kraken, a highly accurate metagenomics classification algorithm, 
to estimate the number of reads originating from each species present in a sample. 

'''
   bracken -d ~{krakenDb} -i ~{sample} -i ~{krakenReport} -o ~{sample}.bracken -r ~{readLength} -l ~{classLevel} -t ~{threshold}

   python3<<CODE
   import json
   import json

   report_file = ~{sample}.bracken
   json_name = ~{sample}_brackenReport.json
   sampleName = ~{sample}
   jsonDict = {sampleName: []}
   header = []
   limit = ~{minRatio}    # minimum read fraction to consider as contamination

   """For Bracken, we need fields 2,4,5,6 to be int and 7 - float type"""
   def typeCast(reportString):
       stringList = reportString.split("\t")
       if len(stringList) != 7:
           return stringList
       for i in [1, 3, 4, 5]:
           stringList[i] = int(stringList[i])
       stringList[6] = float(stringList[6])
       return stringList

   """Read from Bracken report, convert to json"""
   with open(report_file) as r:
       for line in r:
           lineIn = line.rstrip()
           if lineIn.find("taxonomy_id") > 0:
               header = lineIn.split("\t")
               continue
           tmp = typeCast(lineIn)
           if float(tmp[-1]) < limit:
               continue
           jsonDict[sampleName].append(dict(zip(header, tmp)))
   r.close()

   if len(jsonDict.keys()) > 0:
       with open(json_name, 'w') as json_file:
           json.dump(jsonDict, json_file)
   CODE
'''
